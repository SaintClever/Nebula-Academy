{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loops in Python\n",
    "\n",
    "In Python, loops are used to repeatedly execute a block of code until a certain condition is met. There are two types of loops in Python: `while` loops and `for` loops. In this tutorial, we will explore both loop types and learn how to use them effectively.\n",
    "\n",
    "## üîÑ While Loop\n",
    "\n",
    "A `while` loop repeatedly executes a block of code as long as a specified condition is True. The basic syntax of a `while` loop in Python is as follows:\n",
    "\n",
    "```python\n",
    "while condition:\n",
    "    # code to be executed\n",
    "```\n",
    "\n",
    "The `condition` is checked at the beginning of each iteration. If the condition is True, the code block inside the loop is executed. Afterward, the condition is checked again, and the process continues until the condition becomes False.\n",
    "\n",
    "### üßëüèΩ‚Äçüíª You do\n",
    "\n",
    "**Print numbers from 1 to 5 using a while loop**\n",
    "\n",
    "1. Create a variable named `num` and initialize it to 1.\n",
    "2. Write a while loop that prints the value of `num` and increments it by 1 in each iteration.\n",
    "3. Make sure the loop continues as long as `num` is less than or equal to 5.\n",
    "\n",
    "# Your Code Here ‚úÖ\n",
    "num = 1\n",
    "while num <= 5:\n",
    "    print(num)\n",
    "    num += 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîÑ For Loop\n",
    "\n",
    "A `for` loop is used to iterate over a sequence (such as a list, tuple, string, or range) or any other iterable object. The basic syntax of a `for` loop in Python is as follows:\n",
    "\n",
    "```python\n",
    "for element in sequence:\n",
    "    # code to be executed\n",
    "```\n",
    "\n",
    "In each iteration, the loop variable (`element`) takes the value of the next element in the sequence. The code block inside the loop is executed for each element in the sequence.\n",
    "\n",
    "### üßëüèΩ‚Äçüíª You do\n",
    "\n",
    "**Print each fruit in the list**\n",
    "\n",
    "1. Create a list named `fruits` containing the following fruits: \"apple\", \"banana\", and \"cherry\".\n",
    "2. Use a `for` loop to iterate over the `fruits` list.\n",
    "3. Inside the loop, print each fruit.\n",
    "\n",
    "# Your Code Here ‚úÖ\n",
    "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
    "for fruit in fruits:\n",
    "    print(fruit)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîÑ Loop Control Statements\n",
    "\n",
    "Python provides two loop control statements that allow you to alter the flow of execution within loops:\n",
    "\n",
    "- The `break` statement terminates the loop prematurely, regardless of the loop's condition. It is commonly used to exit a loop when a certain condition is met.\n",
    "- The `continue` statement skips the remaining code in the current iteration and moves on to the next iteration. It is useful when you want to skip certain elements or perform specific actions based on conditions.\n",
    "\n",
    "### üßëüèΩ‚Äçüíª You do\n",
    "\n",
    "**Print even numbers from 1 to 10**\n",
    "\n",
    "1. Use a `for` loop to iterate over the numbers from 1 to 10 (inclusive).\n",
    "2. Inside the loop, use an `if` statement to check if the current number is odd.\n",
    "3. If the number is odd, use the `continue` statement to skip the remaining code and move to the next iteration.\n",
    "4. If the number is even, print it.\n",
    "\n",
    "# Your Code Here ‚úÖ\n",
    "for num in range(1, 11):\n",
    "    if num % 2 != 0:\n",
    "        continue\n",
    "    print(num)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîÑ Nested Loops\n",
    "\n",
    "Python allows you to nest loops within each other, which means you can put a loop inside another loop. This is useful when you need to perform more complex iterations, such as iterating over a grid or a multidimensional list.\n",
    "\n",
    "### üßëüèΩ‚Äçüíª You do\n",
    "\n",
    "**Print a multiplication table**\n",
    "\n",
    "1. Use nested `for` loops to iterate over the numbers from 1 to 10 (inclusive) for both the rows and columns.\n",
    "2. Multiply the row number by the column number to get the product.\n",
    "3. Print the product in a formatted manner to create a multiplication table.\n",
    "\n",
    "# Your Code Here ‚úÖ\n",
    "for row in range(1, 11):\n",
    "    for col in range(1, 11):\n",
    "        product = row * col\n",
    "        print(f'{row} x {col} = {product}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "In this tutorial, we covered the concepts of `while` loops and `for` loops in Python. `while` loops allow us to repeat a block of code while a condition is True. `for` loops provide a convenient way to iterate over a sequence of elements or a specified range. We also explored loop control statements like `break` and `continue`, which allow us to alter the flow of execution within loops. Lastly, we learned about nested loops and how they can be used for more complex iterations.\n",
    "\n",
    "Loops are powerful tools in programming that enable us to automate repetitive tasks and solve problems efficiently. With the knowledge gained from this tutorial, you can now start using loops effectively in your Python programs.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
