{
    "cells": [
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## Question 1:\n",
       "Part A: Creating and Modifying Lists\n",
       "\n",
       "Create an empty list called `fruits`.\n",
       "Use the `append()` method to add the following fruits to the list: \"apple\", \"banana\", \"orange\", \"grape\".\n",
       "Print the updated list of fruits."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part A: Creating and Modifying Lists\n\n",
       "# Create an empty list called fruits\n",
       "fruits = []\n\n",
       "# Use the append() method to add fruits to the list\n",
       "fruits.append(\"apple\")\n",
       "fruits.append(\"banana\")\n",
       "fruits.append(\"orange\")\n",
       "fruits.append(\"grape\")\n\n",
       "# Print the updated list of fruits\n",
       "print(fruits)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part B: List Indexing\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
       "```\n",
       "\n",
       "Print the first element of the list.\n",
       "Print the last element of the list.\n",
       "Print the third element of the list.\n",
       "Print a sublist containing the second to fifth elements of the list."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part B: List Indexing\n\n",
       "# Define the list\n",
       "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
       "# Print the first element of the list\n",
       "print(numbers[0])\n\n",
       "# Print the last element of the list\n",
       "print(numbers[-1])\n\n",
       "# Print the third element of the list\n",
       "print(numbers[2])\n\n",
       "# Print a sublist containing the second to fifth elements of the list\n",
       "print(numbers[1:5])"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part C: Checking List Items\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "colors = [\"red\", \"green\", \"blue\", \"yellow\"]\n",
       "```\n",
       "\n",
       "Check if \"green\" is present in the list using the `in` operator and print the result.\n",
       "Check if \"purple\" is not present in the list using the `not in` operator and print the result."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part C: Checking List Items\n\n",
       "# Define the list\n",
       "colors = [\"red\", \"green\", \"blue\", \"yellow\"]\n\n",
       "# Check if \"green\" is present in the list\n",
       "print(\"green\" in colors)\n\n",
       "# Check if \"purple\" is not present in the list\n",
       "print(\"purple\" not in colors)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## Question 2:\n",
       "Part A: List Methods\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "my_list = [1, 2, 3, 4, 5]\n",
       "```\n",
       "\n",
       "Use the `insert()` method to insert the number 6 at index 2.\n",
       "Use the `pop()` method to remove the element at index 3 and assign it to a variable called `removed_element`.\n",
       "Print the updated list after inserting and removing elements."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part A: List Methods\n\n",
       "# Define the list\n",
       "my_list = [1, 2, 3, 4, 5]\n\n",
       "# Use the insert() method to insert the number 6 at index 2\n",
       "my_list.insert(2, 6)\n\n",
       "# Use the pop() method to remove the element at index 3 and assign it to a variable\n",
       "removed_element = my_list.pop(3)\n\n",
       "# Print the updated list\n",
       "print(my_list)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part B: Unpacking Lists\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "numbers = [1, 2, 3, 4, 5]\n",
       "```\n",
       "\n",
       "Unpack the list `numbers` into individual variables `a`, `b`, `c`, `d`, and `e`.\n",
       "Print the values of the variables."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part B: Unpacking Lists\n\n",
       "# Define the list\n",
       "numbers = [1, 2, 3, 4, 5]\n\n",
       "# Unpack the list into individual variables\n",
       "a, b, c, d, e = numbers\n\n",
       "# Print the values of the variables\n",
       "print(a)\n",
       "print(b)\n",
       "print(c)\n",
       "print(d)\n",
       "print(e)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part C: List Concatenation\n",
       "\n",
       "Consider the following lists:\n",
       "\n",
       "```python\n",
       "list1 = [1, 2, 3]\n",
       "list2 = [4, 5, 6]\n",
       "```\n",
       "\n",
       "Concatenate `list1` and `list2` into a new list called `combined_list`.\n",
       "Print the `combined_list`."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part C: List Concatenation\n\n",
       "# Define the lists\n",
       "list1 = [1, 2, 3]\n",
       "list2 = [4, 5, 6]\n\n",
       "# Concatenate list1 and list2 into a new list\n",
       "combined_list = list1 + list2\n\n",
       "# Print the combined list\n",
       "print(combined_list)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## Question 3:\n",
       "Part A: List Slicing\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n",
       "```\n",
       "\n",
       "Use list slicing to create a new list called `sublist` containing elements from index 2 to 5 (inclusive).\n",
       "Print the `sublist`."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part A: List Slicing\n\n",
       "# Define the list\n",
       "letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n\n",
       "# Create a sublist using list slicing\n",
       "sublist = letters[2:6]\n\n",
       "# Print the sublist\n",
       "print(sublist)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part B: Modifying List Elements\n",
       "\n",
       "Consider the following list:\n",
       "\n",
       "```python\n",
       "names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\n",
       "```\n",
       "\n",
       "Change the name at index 1 to \"Barbara\".\n",
       "Change the name at index 3 to \"Daniel\".\n",
       "Print the updated `names` list."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part B: Modifying List Elements\n\n",
       "# Define the list\n",
       "names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\n\n",
       "# Change the name at index 1 to \"Barbara\"\n",
       "names[1] = \"Barbara\"\n\n",
       "# Change the name at index 3 to \"Daniel\"\n",
       "names[3] = \"Daniel\"\n\n",
       "# Print the updated names list\n",
       "print(names)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "Part C: List Operations\n",
       "\n",
       "Consider the following lists:\n",
       "\n",
       "```python\n",
       "list1 = [1, 2, 3]\n",
       "list2 = [3, 4, 5]\n",
       "```\n",
       "\n",
       "Use the `+` operator to concatenate `list1` and `list2` into a new list called `result`.\n",
       "Use the `*` operator to repeat `list1` three times and assign it to a variable called `repeated_list`.\n",
       "Print the `result` and `repeated_list`."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Part C: List Operations\n\n",
       "# Define the lists\n",
       "list1 = [1, 2, 3]\n",
       "list2 = [3, 4, 5]\n\n",
       "# Concatenate list1 and list2 into a new list\n",
       "result = list1 + list2\n\n",
       "# Repeat list1 three times\n",
       "repeated_list = list1 * 3\n\n",
       "# Print the result and repeated_list\n",
       "print(result)\n",
       "print(repeated_list)"
      ]
     }
    ]
   }
   