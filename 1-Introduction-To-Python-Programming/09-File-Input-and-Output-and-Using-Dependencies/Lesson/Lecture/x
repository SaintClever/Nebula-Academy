{
"cells": [
{
"cell_type": "markdown",
"metadata": {},
"source": [
"## Lesson: File Operations and Dependency Management\n",
"\n",
"### File I/O\n",
"\n",
"File Input/Output (I/O) is an essential aspect of programming that involves reading from and writing to files. Python provides various methods and modules to perform file I/O operations. Let's explore some of these concepts:\n",
"\n",
"- Opening and closing files using the `open()` function\n",
"- Reading data from files using methods like `readline()`, `readlines()`, and `read()`\n",
"- Writing data to files using methods like `write()` and `writelines()`\n",
"- Utilizing the `with` statement for automatic file closing\n",
"- Managing file I/O errors using try/except blocks\n",
"- Accessing the file system and performing OS-related tasks using the `os` module\n",
"- Reading and writing JSON files using the `json` module\n",
"- Reading and writing CSV files using the `csv` module\n",
"\n",
"Let's dive into each of these concepts one by one."
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Opening and Closing Files\n",
"\n",
"To read or write data from a file, you need to open it first. Python provides the `open()` function for this purpose. Here's an example that demonstrates how to open and close a file:\n",
"\n",
"```python\n",
"file = open('filename.txt', 'r')\n",
"content = file.read()\n",
"file.close()\n",
"```\n",
"\n",
"In this example, we open a file named `filename.txt` in read mode (`'r'`). We then read the file content using the `read()` method and store it in the `content` variable. Finally, we close the file using the `close()` method to free up system resources."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Opening and Closing Files\n",
"\n",
"file = open('filename.txt', 'r')\n",
"content = file.read()\n",
"file.close()\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Working with Files using `with`\n",
"\n",
"Python provides the `with` statement as a more convenient way to work with files. It automatically takes care of opening and closing the file, even in the case of exceptions. Here's an example:\n",
"\n",
"```python\n",
"with open('filename.txt', 'r') as file:\n",
" content = file.read()\n",
"```\n",
"\n",
"In this example, the `with` statement is used to open the file `filename.txt` in read mode. The file object is assigned to the variable `file`. We can then read the file content using the `read()` method. Once the block inside the `with` statement is executed, the file is automatically closed, ensuring proper resource management."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Working with Files using `with`\n",
"\n",
"with open('filename.txt', 'r') as file:\n",
" content = file.read()\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Checking File Existence\n",
"\n",
"To check if a file exists before performing any operations on it, you can use the `os.path.exists()` function from the `os` module. Here's an example:\n",
"\n",
"```python\n",
"import os\n",
"\n",
"if os.path.exists('filename.txt'):\n",
" print('File exists')\n",
"else:\n",
" print('File does not exist')\n",
"```\n",
"\n",
"In this example, the `os.path.exists()` function is used to check if the file `filename.txt` exists. Depending on the result, a corresponding message is printed."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Checking File Existence\n",
"\n",
"import os\n",
"\n",
"if os.path.exists('filename.txt'):\n",
" print('File exists')\n",
"else:\n",
" print('File does not exist')\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Creating a Directory\n",
"\n",
"To create a new directory (folder) in Python, you can use the `os.mkdir()` function. Here's an example:\n",
"\n",
"```python\n",
"import os\n",
"\n",
"os.mkdir('directory_name')\n",
"```\n",
"\n",
"In this example, we use the `os.mkdir()` function to create a new directory named `'directory_name'`."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Creating a Directory\n",
"\n",
"import os\n",
"\n",
"os.mkdir('directory_name')\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Deleting a File\n",
"\n",
"To delete a file in Python, you can use the `os.remove()` function. Here's an example:\n",
"\n",
"```python\n",
"import os\n",
"\n",
"os.remove('filename.txt')\n",
"```\n",
"\n",
"In this example, the `os.remove()` function is used to delete the file `'filename.txt'`."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Deleting a File\n",
"\n",
"import os\n",
"\n",
"os.remove('filename.txt')\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Working with JSON Files\n",
"\n",
"JSON (JavaScript Object Notation) is a popular data interchange format. Python provides the `json` module to work with JSON files. Let's see an example of how to read and write JSON files:\n",
"\n",
"```python\n",
"import json\n",
"\n",
"# Reading a JSON file\n",
"with open('data.json', 'r') as file:\n",
" data = json.load(file)\n",
"\n",
"# Writing to a JSON file\n",
"data = {'name': 'John', 'age': 30}\n",
"with open('data.json', 'w') as file:\n",
" json.dump(data, file)\n",
"```\n",
"\n",
"In this example, we first open a JSON file named `'data.json'` in read mode and use the `json.load()` function to load the file's contents into the `data` variable. Then, we create a Python dictionary `data` and write it to the same JSON file using the `json.dump()` function."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Working with JSON Files\n",
"\n",
"import json\n",
"\n",
"# Reading a JSON file\n",
"with open('data.json', 'r') as file:\n",
" data = json.load(file)\n",
"\n",
"# Writing to a JSON file\n",
"data = {'name': 'John', 'age': 30}\n",
"with open('data.json', 'w') as file:\n",
" json.dump(data, file)\n"
]
},
{
"cell_type": "markdown",
"metadata": {},
"source": [
"### Working with CSV Files\n",
"\n",
"CSV (Comma-Separated Values) is a common file format used for storing tabular data. Python provides the `csv` module to work with CSV files. Let's see an example of how to read and write CSV files:\n",
"\n",
"`python\n",
        "import csv\n",
        "\n",
        "# Reading a CSV file\n",
        "with open('data.csv', 'r') as file:\n",
        "    reader = csv.reader(file)\n",
        "    for row in reader:\n",
        "        print(row)\n",
        "\n",
        "# Writing to a CSV file\n",
        "data = [['Name', 'Age'],\n",
        "        ['John', 30],\n",
        "        ['Alice', 25]]\n",
        "with open('data.csv', 'w') as file:\n",
        "    writer = csv.writer(file)\n",
        "    writer.writerows(data)\n",
        "`\n",
"\n",
"In this example, we first open a CSV file named `'data.csv'` in read mode and use the `csv.reader()` function to read the file's contents row by row. Then, we create a list of lists `data` and write it to the same CSV file using the `csv.writer()` function."
]
},
{
"cell_type": "code",
"metadata": {},
"source": [
"# Working with CSV Files\n",
"\n",
"import csv\n",
"\n",
"# Reading a CSV file\n",
"with open('data.csv', 'r') as file:\n",
" reader = csv.reader(file)\n",
" for row in reader:\n",
" print(row)\n",
"\n",
"# Writing to a CSV file\n",
"data = [['Name', 'Age'],\n",
        "        ['John', 30],\n",
        "        ['Alice', 25]]\n",
"with open('data.csv', 'w') as file:\n",
" writer = csv.writer(file)\n",
" writer.writerows(data)\n"
]
}
]
}
