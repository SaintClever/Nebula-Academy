{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Part 1: Conditional Statements\n",
        "\n",
        "## 1.1 Introduction to Conditional Statements\n",
        "\n",
        "Conditional statements are an essential aspect of programming that allow us to make decisions based on certain conditions. In Python, conditional statements are implemented using the keywords \"if,\" \"else,\" and \"elif\" (short for \"else if\").\n",
        "\n",
        "The basic structure of an if statement in Python is as follows:\n",
        "\n",
        "```python\n",
        "if condition:\n",
        "    # Code to be executed if the condition is True\n",
        "```\n",
        "\n",
        "The condition is an expression that evaluates to either True or False. If the condition is True, the code block indented under the if statement is executed. If the condition is False, the code block is skipped, and the program moves on to the next statement.\n",
        "\n",
        "## 1.2 Implementing Basic Decision Making\n",
        "\n",
        "Let's look at an example to understand how basic decision making works using conditional statements:\n",
        "\n",
        "```python\n",
        "age = int(input(\"Enter your age: \"))\n",
        "\n",
        "if age >= 18:\n",
        "    print(\"You are eligible to vote.\")\n",
        "else:\n",
        "    print(\"You are not eligible to vote.\")\n",
        "```\n",
        "\n",
        "In this example, the program asks the user to enter their age using the `input()` function. The entered value is then converted to an integer using the `int()` function and stored in the `age` variable.\n",
        "\n",
        "The if statement checks if the `age` is greater than or equal to 18. If it is, the program prints \"You are eligible to vote.\" Otherwise, it executes the code under the else statement and prints \"You are not eligible to vote.\"\n",
        "\n",
        "## 1.3 Enhancing Decision Making with Logical Operators\n",
        "\n",
        "Python provides logical operators such as \"and,\" \"or,\" and \"not\" to enhance decision making with conditional statements.\n",
        "\n",
        "Here's an example that demonstrates the usage of logical operators:\n",
        "\n",
        "```python\n",
        "num = int(input(\"Enter a number: \"))\n",
        "\n",
        "if num > 0 and num % 2 == 0:\n",
        "    print(\"The number is positive and even.\")\n",
        "elif num > 0 and num % 2 != 0:\n",
        "    print(\"The number is positive and odd.\")\n",
        "elif num < 0:\n",
        "    print(\"The number is negative.\")\n",
        "else:\n",
        "    print(\"The number is zero.\")\n",
        "```\n",
        "\n",
        "In this example, the program asks the user to enter a number. Based on the entered number, the program uses multiple conditions (if, elif, else) to determine its characteristics. The logical operators \"and\" and \"or\" are used to combine conditions.\n",
        "\n",
        "## 1.4 Nesting Conditional Statements\n",
        "\n",
        "Nesting conditional statements means including one if statement inside another if statement. This allows for more complex decision making.\n",
        "\n",
        "Consider the following example:\n",
        "\n",
        "```python\n",
        "num = int(input(\"Enter a number: \"))\n",
        "\n",
        "if num >= 0:\n",
        "    if num == 0:\n",
        "        print(\"The number is zero.\")\n",
        "    else:\n",
        "        print(\"The number is positive.\")\n",
        "else:\n",
        "    print(\"The number is negative.\")\n",
        "```\n",
        "\n",
        "In this example, the program first checks if the number is greater than or equal to zero. If it is, it further checks if the number is zero or positive. If the number is negative, it directly prints \"The number is negative.\" By nesting the if statements, we can create a hierarchical decision-making process."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Part 2: Loops\n",
        "\n",
        "## 2.1 Understanding While and For Loops\n",
        "\n",
        "Loops are used to repeat a block of code multiple times until a certain condition is met. Python provides two types of loops: while and for loops.\n",
        "\n",
        "A while loop executes a block of code repeatedly as long as a specified condition is True. Here's an example:\n",
        "\n",
        "```python\n",
        "count = 0\n",
        "\n",
        "while count < 5:\n",
        "    print(\"Count:\", count)\n",
        "    count += 1\n",
        "```\n",
        "\n",
        "In this example, the program initializes the `count` variable to 0. The while loop checks if the `count` is less than 5. If it is, it prints the current value of `count` and increments it by 1. The loop continues until the condition `count < 5` becomes False.\n",
        "\n",
        "A for loop, on the other hand, iterates over a sequence of elements. Here's an example:\n",
        "\n",
        "```python\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "\n",
        "for fruit in fruits:\n",
        "    print(fruit)\n",
        "```\n",
        "\n",
        "In this example, the for loop iterates over the `fruits` list. For each iteration, the current fruit is assigned to the `fruit` variable, and the code block indented under the for loop is executed. This loop will print each fruit in the `fruits` list.\n",
        "\n",
        "## 2.2 Controlling Loops with Break and Continue\n",
        "\n",
        "Python provides two keywords, `break` and `continue`, to control the flow of loops.\n",
        "\n",
        "The `break` statement is used to exit a loop prematurely. It immediately terminates the loop and transfers the control to the next statement after the loop.\n",
        "\n",
        "Here's an example that demonstrates the use of the `break` statement:\n",
        "\n",
        "```python\n",
        "count = 0\n",
        "\n",
        "while count < 5:\n",
        "    print(\"Count:\", count)\n",
        "    count += 1\n",
        "    if count == 3:\n",
        "        break\n",
        "```\n",
        "\n",
        "In this example, the while loop is set to execute as long as `count` is less than 5. Inside the loop, the current value of `count` is printed. When `count` becomes 3, the `break` statement is encountered, and the loop is terminated.\n",
        "\n",
        "The `continue` statement, on the other hand, is used to skip the rest of the code in a loop and move to the next iteration.\n",
        "\n",
        "Here's an example that demonstrates the use of the `continue` statement:\n",
        "\n",
        "```python\n",
        "for num in range(10):\n",
        "    if num % 2 == 0:\n",
        "        continue\n",
        "    print(num)\n",
        "```\n",
        "\n",
        "In this example, the for loop iterates over the range of numbers from 0 to 9. If the current number is even, the `continue` statement is encountered, and the loop moves to the next iteration without executing the code below it. As a result, only the odd numbers are printed.\n",
        "\n",
        "## 2.3 Nesting Loops\n",
        "\n",
        "Similar to nesting conditional statements, loops can also be nested inside one another. This allows for more complex looping structures.\n",
        "\n",
        "Here's an example of nested loops:\n",
        "\n",
        "```python\n",
        "for i in range(3):\n",
        "    for j in range(2):\n",
        "        print(i, j)\n",
        "```\n",
        "\n",
        "In this example, the outer loop iterates over the range of numbers from 0 to 2, and the inner loop iterates over the range of numbers from 0 to 1. The `print(i, j)` statement is executed for each combination of `i` and `j`. As a result, it prints the following output:\n",
        "\n",
        "```\n",
        "0 0\n",
        "0 1\n",
        "1 0\n",
        "1 1\n",
        "2 0\n",
        "2 1\n",
        "```\n",
        "\n",
        "Nesting loops can be useful in situations where you need to iterate over multiple dimensions or perform repetitive tasks with different combinations of variables."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
